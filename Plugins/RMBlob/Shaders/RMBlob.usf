struct RMstruct
{
    float RMSphere(float3 pos)
    {
        return length(pos) - BlobSize;
    }

    float3 RMNormal(float3 pos)
    {

        float2 Offset = float2(0.01, 0);

        return normalize(float3(
            RMSphere(pos + Offset.xyy) - RMSphere(pos - Offset.xyy),
            RMSphere(pos + Offset.yxy) - RMSphere(pos - Offset.yxy),
            RMSphere(pos + Offset.yyx) - RMSphere(pos - Offset.yyx)
         ));
    }

    float opSmoothUnion( float d1, float d2, float k ) 
    {
        float h = clamp( 0.5 + 0.5*(d2-d1)/k, 0.0, 1.0 );
        return lerp( d2, d1, h ) - k*h*(1.0-h); 
    }

};


RMstruct RM;
float4 Col = float4(0,0,0,0);
float3 pos = WorldPosition;
float3 normal = float3(0,0,0);


for(int i = 0; i < MaxSteps; i++)
{
    //Col += 1.0 / MaxSteps;

    if(SceneDepth < length(pos - CameraPos))
        break;

    float d1 = RM.RMSphere(pos - ObjectPosition);
    float d2 = SceneDepth - length(pos - CameraPos);
    //float d2 =  GetDistanceToNearestSurfaceGlobal(pos);

    float distance = RM.opSmoothUnion(d1, d2, Smooth);

    if(distance < RMStop)
    {
        Col = 1;
        normal = RM.RMNormal(pos - ObjectPosition);
        break;
    }

    pos += CameraVector * StepResolution;
}

return float4(normal, Col.a);